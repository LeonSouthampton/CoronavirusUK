{"version":3,"sources":["routes/routeMenu.js","pages/Map/index.js","routes/index.js","index.js"],"names":["routeMenu","routes","path","component","useEffect","console","log","fetch","then","res","json","userData","chart","Chart","container","autoFit","width","height","padding","tooltip","showTitle","showMarkers","shared","scale","longitude","sync","latitude","axis","legend","position","ds","DataSet","worldMap","createView","source","JSONMap","type","worldMapView","data","rows","polygon","style","fill","stroke","lineWidth","max","map","item","value","userDv","transform","geoDataView","field","as","callback","obj","trend","userView","alias","color","fillOpacity","animate","leave","animation","interaction","render","id","margin","renderRoute","props","i","Layout","layout","Component","redirect","key","exact","from","to","Redirects","toString","Routes","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b769b529.chunk.js","sourcesContent":["import Maps from \"@/pages/Map\";\n\nconst routeMenu = [\n  {\n    routes: [\n      {\n        path: \"/\",\n        component: Maps\n      }\n    ]\n  },\n];\n\nexport default routeMenu;\n","import React, { useEffect } from \"react\";\nimport DataSet from \"@antv/data-set\";\nimport { Chart } from \"@antv/g2\";\nimport JSONMap from \"./map.json\";\n\nconst World = () => {\n  useEffect(() => {\n    console.log(\"a\");\n    fetch(\"http://118.25.142.202:8888/\")\n      .then(res => res.json())\n      .then(userData => {\n        const chart = new Chart({\n          container: \"container\",\n          autoFit: false,\n          width: 550,\n          height: 720,\n          padding: [10, 0, 10, 100]\n        });\n        chart.tooltip({\n          showTitle: false,\n          showMarkers: false,\n          shared: true\n        });\n        // 同步度量\n        chart.scale({\n          longitude: {\n            sync: true\n          },\n          latitude: {\n            sync: true\n          }\n        });\n        chart.axis(false);\n        chart.legend(\"trend\", {\n          position: \"left\"\n        });\n\n        // 绘制世界地图背景\n        const ds = new DataSet();\n        const worldMap = ds.createView(\"back\").source(JSONMap, {\n          type: \"GeoJSON\"\n        });\n        const worldMapView = chart.createView();\n        worldMapView.data(worldMap.rows);\n        worldMapView.tooltip(false);\n        worldMapView\n          .polygon()\n          .position(\"longitude*latitude\")\n          .style({\n            fill: \"#fff\",\n            stroke: \"#ccc\",\n            lineWidth: 1\n          });\n\n        // 可视化用户数据\n        // const userData = [\n        //   { name: \"Wakefield\", value: 100 },\n        //   { name: \"Leeds\", value: 80 },\n        //   { name: \"Bradford\", value: 60 },\n        //   { name: \"Calderdale\", value: 40 },\n        //   { name: \"Kirklees\", value: 20 }\n        // ];\n\n        let max = 0;\n        userData.map(item => {\n          if (item.value > max) {\n            max = item.value;\n          }\n        });\n\n        console.log(max);\n\n        const userDv = ds\n          .createView()\n          .source(userData)\n          .transform({\n            geoDataView: worldMap,\n            field: \"name\",\n            type: \"geo.region\",\n            as: [\"longitude\", \"latitude\"]\n          })\n          .transform({\n            type: \"map\",\n            callback: obj => {\n              const { value } = obj;\n              if (value <= max / 5) {\n                obj.trend = `小于20%（${max / 5}）`;\n              }\n              if (value <= (max * 2) / 5 && value > max / 5) {\n                obj.trend = `小于40%（${max / 5}）,大于20%（${max / 5}）`;\n              }\n              if (value <= (max * 3) / 5 && value > (max * 2) / 5) {\n                obj.trend = `小于60%（${max / 5}）,大于40%（${(max * 2) / 5}）`;\n              }\n              if (value <= (max * 4) / 5 && value > (max * 3) / 5) {\n                obj.trend = `小于80%（${max / 5}）,大于60%（${(max * 3) / 5}）`;\n              }\n              if (value <= (max * 5) / 5 && value > (max * 4) / 5) {\n                obj.trend = `大于80%（${(max * 4) / 5}）`;\n              }\n              return obj;\n            }\n          });\n        const userView = chart.createView();\n        userView.data(userDv.rows);\n        userView.scale({\n          trend: {\n            alias: \"占最大值的百分比\"\n          }\n        });\n        userView\n          .polygon()\n          .position(\"longitude*latitude\")\n          .color(\"trend\", [\n            \"#610b00\",\n            \"#ad2102\",\n            \"#fa541c\",\n            \"#ff9c6e\",\n            \"#ffd8bf\"\n          ])\n          .tooltip(\"name*trend\")\n          .style({\n            fillOpacity: 0.85\n          })\n          .animate({\n            leave: {\n              animation: \"fade-out\"\n            }\n          });\n        userView.interaction(\"element-active\");\n\n        chart.render();\n      });\n  }, []);\n\n  return (\n    <div\n      id=\"container\"\n      style={{ width: \"550px\", height: \"720px\", margin: \"auto\" }}\n    ></div>\n  );\n};\n\nexport default World;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport routeMenu from \"./routeMenu\";\n\nconst Redirects = ({ path, redirect }) => (\n  <Redirect key={path} exact from={path} to={redirect} />\n);\n\nconst Routes = (Layout, props, i, { path, Component }) => (\n  <Route\n    exact\n    key={path}\n    path={path}\n    render={() => (\n      <>\n        {Layout ? (\n          <Layout key={i.toString()} {...props}>\n            <Component />\n          </Layout>\n        ) : (\n          <Component key={i.toString()} />\n        )}\n      </>\n    )}\n  />\n);\n\nconst renderRoute = props => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        {routeMenu.map(({ layout: Layout, routes }, i) => {\n          return (\n            routes &&\n            routes.map(({ path, component: Component, redirect }) => {\n              return redirect\n                ? Redirects({ path, redirect })\n                : Routes(Layout, props, i, { path, Component });\n            })\n          );\n        })}\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default renderRoute;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Routes from \"@/routes\";\n\nReactDOM.render(<Routes />, document.getElementById(\"root\"));\n"],"sourceRoot":""}